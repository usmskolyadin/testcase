version: '3.8'

services:
  db:
    image: postgres:16.2
    container_name: my_task_db
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./db:/var/lib/postgresql/data
    networks:
      - my_task_api
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: my_task_mongo
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - ./mongo_data:/data/db
    networks:
      - my_task_api

  redis:
    image: redis:latest
    container_name: my_task_redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - '6379:6379'
    networks:
      - my_task_api
      
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_task_celery
    restart: always
    depends_on:
      - redis
      - db
    env_file:
      - .env
    volumes:
      - ./:/my_task_api/
    command: ["poetry", "run", "celery", "-A", "src.core.celery_worker.celery", "worker", "--loglevel=info"]
    networks:
      - my_task_api

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_task_app
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '8000:8000'
    env_file:
      - .env
    volumes:
      - ./:/my_task_api/
    networks:
      - my_task_api

networks:
  my_task_api:
    driver: "bridge"
